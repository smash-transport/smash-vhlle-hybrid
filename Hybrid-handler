#!/usr/bin/env bash

#===================================================
#
#    Copyright (c) 2023
#      SMASH Hybrid Team
#
#    GNU General Public License (GPLv3 or later)
#
#===================================================

#----------------------------------------------------------------------------#
#     __  __      __         _     __   __  __                ____           #
#    / / / /_  __/ /_  _____(_)___/ /  / / / /___ _____  ____/ / /__  _____  #
#   / /_/ / / / / __ \/ ___/ / __  /  / /_/ / __ `/ __ \/ __  / / _ \/ ___/  #
#  / __  / /_/ / /_/ / /  / / /_/ /  / __  / /_/ / / / / /_/ / /  __/ /      #
# /_/ /_/\__, /_.___/_/  /_/\__,_/  /_/ /_/\__,_/_/ /_/\__,_/_/\___/_/       #
#       /____/                                                               #
#                                                                            #
#----------------------------------------------------------------------------#

# Set stricter bash mode (see CONTRIBUTING for more information)
set -o pipefail -o nounset -o errexit
shopt -s extglob inherit_errexit

function Main()
{
    Setup_Initial_And_Final_Output_Space
    Define_Repository_Global_Path
    Store_Command_Line_Options_Into_Global_Variable "$@"
    Source_Codebase_Files
    Define_Further_Global_Variables
    Parse_Execution_Mode
    Act_And_Exit_If_User_Ran_Auxiliary_Modes
    Check_System_Requirements
    Parse_Command_Line_Options
    Make_Needed_Operations_Depending_On_Execution_Mode
}

function Setup_Initial_And_Final_Output_Space()
{
    printf '\n'
    trap 'printf "\n"' EXIT
}

function Define_Repository_Global_Path()
{
    readonly HYBRID_repository_global_path=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
}

function Store_Command_Line_Options_Into_Global_Variable()
{
    HYBRID_specified_command_line_options=( "$@" )
}

function Source_Codebase_Files()
{
    source "${HYBRID_repository_global_path}/bash/source_codebase_files.bash" || exit 1
}

function Act_And_Exit_If_User_Ran_Auxiliary_Modes()
{
    case "${HYBRID_execution_mode}" in
        help )
            Give_Required_Help
            ;;&
        version )
            Print_Software_Version
            ;;&
        help | version )
            exit ${HYBRID_success_exit_code}
            ;;
    esac
}

function Make_Needed_Operations_Depending_On_Execution_Mode()
{
    Print_Not_Implemented_Function_Error
}

Main "$@"
