#!/usr/bin/env bash

#===================================================
#
#    Copyright (c) 2023-2025
#      SMASH Hybrid Team
#
#    GNU General Public License (GPLv3 or later)
#
#===================================================

#----------------------------------------------------------------------------#
#     __  __      __         _     __   __  __                ____           #
#    / / / /_  __/ /_  _____(_)___/ /  / / / /___ _____  ____/ / /__  _____  #
#   / /_/ / / / / __ \/ ___/ / __  /  / /_/ / __ `/ __ \/ __  / / _ \/ ___/  #
#  / __  / /_/ / /_/ / /  / / /_/ /  / __  / /_/ / / / / /_/ / /  __/ /      #
# /_/ /_/\__, /_.___/_/  /_/\__,_/  /_/ /_/\__,_/_/ /_/\__,_/_/\___/_/       #
#       /____/                                                               #
#                                                                            #
#----------------------------------------------------------------------------#

readonly HYBRID_codebase_version='SMASH-vHLLE-hybrid-2.1.2-unreleased'

function Main()
{
    Enable_Desired_Shell_Behavior
    Setup_Initial_And_Final_Output_Space
    Define_Repository_Global_Path
    Store_Command_Line_Options_Into_Global_Variable "$@"
    Source_Codebase_Files
    Define_Further_Global_Variables
    Parse_Execution_Mode
    Act_And_Exit_If_User_Ran_Auxiliary_Modes
    Check_System_Requirements
    Parse_Command_Line_Options
    Make_Needed_Operations_Depending_On_Execution_Mode
}

function Enable_Desired_Shell_Behavior()
{
    # Set stricter bash mode (see CONTRIBUTING for more information)
    set -o pipefail -o nounset -o errexit
    shopt -s extglob inherit_errexit
}

function Setup_Initial_And_Final_Output_Space()
{
    printf '\n'
    trap 'printf "\n"' EXIT
}

function Define_Repository_Global_Path()
{
    # NOTE: This function would reduce to one line using 'readlink -f'. However this function
    #       is meant to be called very early and we want to make as few assumptions on the system
    #       as possible. On macOS the -f option has been added in macOS 12.3 (early 2022) and this
    #       might be problematic. Hence we basically only use 'readlink' to resolve possible
    #       symbolic links. Note that we require 'readlink' to exist as this was introduced in
    #       OpenBSD and GNU around 2000, see comments to https://unix.stackexchange.com/a/136527/370049.
    if ! hash readlink &> /dev/null; then
        exit_code=${HYBRID_fatal_builtin} Print_Fatal_And_Exit \
            "No 'readlink' command found. Please install it and run the Hybrid-handler again."
    fi
    local source directory
    source=${BASH_SOURCE[0]}
    while [[ -L "${source}" ]]; do # resolve ${source} until the file is no longer a symlink
        # Find real directory following possible directory symlinks
        directory=$(cd -P "$(dirname "${source}")" &> /dev/null && pwd)
        source=$(readlink "${source}")
        # NOTE: If ${source} was a relative symlink, we need to resolve it relative
        #       to the path where the symlink file was located. This is needed to ensure
        #       that readlink still works when the script is invoked from a different
        #       position from where it is located.
        if [[ "${source}" != /* ]]; then
            source=${directory}/${source}
        fi
    done
    readonly HYBRID_top_level_path=$(cd -P "$(dirname "${source}")" &> /dev/null && pwd)
}

function Store_Command_Line_Options_Into_Global_Variable()
{
    HYBRID_command_line_options_to_parse=("$@")
}

function Source_Codebase_Files()
{
    source "${HYBRID_top_level_path}/bash/source_codebase_files.bash" || exit 1
}

function Act_And_Exit_If_User_Ran_Auxiliary_Modes()
{
    case "${HYBRID_execution_mode}" in
        *help)
            Give_Required_Help
            ;;&
        format)
            Format_Codebase
            Run_Formatting_Unit_Test
            ;;&
        version)
            Print_Software_Version
            ;;&
        *help | format | version)
            exit 0
            ;;
    esac
}

function Make_Needed_Operations_Depending_On_Execution_Mode()
{
    case "${HYBRID_execution_mode}" in
        do | prepare-scan)
            Perform_Internal_Sanity_Checks
            Validate_And_Parse_Configuration_File
            Perform_Sanity_Checks_On_Provided_Input_And_Define_Auxiliary_Global_Variables
            ;;&
        do)
            Do_Needed_Operations_For_Given_Software
            ;;
        prepare-scan)
            Do_Needed_Operation_For_Parameter_Scan
            ;;
        *)
            Print_Internal_And_Exit "Unexpected execution mode at top-level."
            ;;
    esac
}

Main "$@"
